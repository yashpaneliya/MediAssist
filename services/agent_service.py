import json
import uuid
from agents.Utils.common_methods import get_chatHistory_from_state
from agents.agent_orchestrator import graph_compilation
from core.redis import RedisCache
from models.api_models import AgentRequest, AgentResponse

from utils.logger import logger

async def run_agent_logic(payload: AgentRequest) -> AgentResponse:
    logger.debug(f"Running agent with query='{payload.query}', session_id='{payload.session_id}'")
    redis = RedisCache()
    
    try:
        session_id = payload.session_id or str(uuid.uuid4())
        print(f"Session Id is {session_id}")

        # TODO: fetch history from cache if required based on session_id
        stateKey = redis.get_stateKey(session_id)
        chat_history = ""
        if await redis.exists(stateKey):
            logger.debug(f"Fetching chat history for session_id={session_id}")
            chat_history = await redis.get(stateKey)
            state = json.loads(chat_history)
        else:
            state = {
                "messages": [],
                "intent": None,
                "final_response": None
             }

        state["messages"].append({
            "role": "user",
            "content": payload.query
        })

        if payload.img_base64:
            state["image_data"] = payload.img_base64
            logger.debug(f"Image data added to state for session_id={session_id}")

        # print(f"This is the state passed {state}")  

        app_graph = graph_compilation()
        # TODO: call the agent and process the query

        for updated_state in app_graph.stream(state):
            pass
       
        # print(f"This is the updated state {updated_state}")


        result = updated_state['responder_agent']['finalResponse']
        if not result:
            result = "No response generated by the agent."
        logger.info(f"Agent response for session_id={session_id}: {result}")

        chat_history = get_chatHistory_from_state(updated_state['responder_agent'])
        # Save updated state back to Redis
        await redis.set(stateKey, chat_history)  # Set TTL to 1 hour

        return AgentResponse(
            response=result,
            session_id=session_id,
            status_code=200,
        )

    except Exception as e:
        logger.exception("Agent processing failed")
        return AgentResponse(
            response="",
            session_id=payload.session_id or "unknown",
            error=str(e),
            status_code=500,
        )
